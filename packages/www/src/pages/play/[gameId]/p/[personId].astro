---
import { actions } from "astro:actions";
import { isBefore } from "date-fns/isBefore";
import Layout from "../../../../layouts/Layout.astro";

const { personId, gameId } = Astro.params;

if (!personId || !gameId) {
  throw new Error("NOT FOUND");
}

const [{ data: game }, { data: person }, { data: credits }] = await Promise.all(
  [
    await Astro.callAction(actions.game.getById, {
      id: gameId,
    }),
    await Astro.callAction(actions.person.getById, {
      id: Number(personId),
    }),
    await Astro.callAction(actions.person.getCredits, {
      id: Number(personId),
    }),
  ],
);

if (game?.endPersonId === Number(personId)) {
  // TODO: redirect to victory page
}

const filteredCast =
  credits?.cast
    .sort((a, b) => b.popularity - a.popularity)
    .filter(({ media_type }) => media_type === "movie")
    .filter(({ release_date }) => {
      if (!release_date) return false;

      const releaseDate = new Date(release_date);

      return isBefore(releaseDate, new Date());
    }) ?? [];

const filteredCrew =
  credits?.crew
    .sort((a, b) => b.popularity - a.popularity)
    .filter(
      ({ media_type, department }) =>
        media_type === "movie" && department !== "Directing",
    )
    .filter(({ release_date }) => {
      if (!release_date) return false;

      const releaseDate = new Date(release_date);

      return isBefore(releaseDate, new Date());
    }) ?? [];

const directing =
  credits?.crew
    .sort((a, b) => b.popularity - a.popularity)
    .filter(
      ({ media_type, department }) =>
        media_type === "movie" && department === "Directing",
    ) ?? [];
---

<Layout>
  <div>
    <div>
      <h1>
        {person?.name}
      </h1>
    </div>
    <div>
      <div>
        <div>
          <div>
            <h3>Directing</h3>
            {
              directing.length > 0
                ? directing.map(({ id, title, release_date }) => {
                    const releaseDate = release_date
                      ? new Date(release_date)
                      : undefined;

                    return (
                      <div>
                        {title && (
                          <a href={`/play/${gameId}/m/${id}`}>
                            {title} ({releaseDate?.getFullYear()})
                          </a>
                        )}
                      </div>
                    );
                  })
                : null
            }
          </div>
        </div>
        <div>
          <div>
            <h3>Cast</h3>
            {
              filteredCast.length > 0
                ? filteredCast.map(({ id, title, release_date }) => {
                    const releaseDate = release_date
                      ? new Date(release_date)
                      : undefined;

                    return (
                      <div>
                        {title && (
                          <a href={`/play/${gameId}/m/${id}`}>
                            {title} ({releaseDate?.getFullYear()})
                          </a>
                        )}
                      </div>
                    );
                  })
                : null
            }
          </div>
        </div>
        <div>
          <div>
            <h3>Crew</h3>
            {
              filteredCrew.length > 0
                ? filteredCrew.map(({ id, title, job }) => (
                    <a href={`/play/${gameId}/m/${id}`}>
                      {title} ({job})
                    </a>
                  ))
                : null
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
